"""autogenerated by genpy from ins_kvh/InsKvh.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class InsKvh(genpy.Message):
  _md5sum = "93466884e41e97a01bb09fadc2c5fa22"
  _type = "ins_kvh/InsKvh"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

#state of filter (see manual)
uint8 filter_status
#time stamp in unix
float64 time_stamp_unix
#latitude in rad
float64 latitude
float32 latitude_std
float64 longitude
float32 longitude_std
float64 height
float32 height_std
float32[3] velocity_ned
float32[3] acceleration_body
float32 g_force
float32[3] attitude
float32[3] angular_velocity


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','filter_status','time_stamp_unix','latitude','latitude_std','longitude','longitude_std','height','height_std','velocity_ned','acceleration_body','g_force','attitude','angular_velocity']
  _slot_types = ['std_msgs/Header','uint8','float64','float64','float32','float64','float32','float64','float32','float32[3]','float32[3]','float32','float32[3]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,filter_status,time_stamp_unix,latitude,latitude_std,longitude,longitude_std,height,height_std,velocity_ned,acceleration_body,g_force,attitude,angular_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InsKvh, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.filter_status is None:
        self.filter_status = 0
      if self.time_stamp_unix is None:
        self.time_stamp_unix = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.latitude_std is None:
        self.latitude_std = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.longitude_std is None:
        self.longitude_std = 0.
      if self.height is None:
        self.height = 0.
      if self.height_std is None:
        self.height_std = 0.
      if self.velocity_ned is None:
        self.velocity_ned = [0.,0.,0.]
      if self.acceleration_body is None:
        self.acceleration_body = [0.,0.,0.]
      if self.g_force is None:
        self.g_force = 0.
      if self.attitude is None:
        self.attitude = [0.,0.,0.]
      if self.angular_velocity is None:
        self.angular_velocity = [0.,0.,0.]
    else:
      self.header = std_msgs.msg.Header()
      self.filter_status = 0
      self.time_stamp_unix = 0.
      self.latitude = 0.
      self.latitude_std = 0.
      self.longitude = 0.
      self.longitude_std = 0.
      self.height = 0.
      self.height_std = 0.
      self.velocity_ned = [0.,0.,0.]
      self.acceleration_body = [0.,0.,0.]
      self.g_force = 0.
      self.attitude = [0.,0.,0.]
      self.angular_velocity = [0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2dfdfdf.pack(_x.filter_status, _x.time_stamp_unix, _x.latitude, _x.latitude_std, _x.longitude, _x.longitude_std, _x.height, _x.height_std))
      buff.write(_struct_3f.pack(*self.velocity_ned))
      buff.write(_struct_3f.pack(*self.acceleration_body))
      buff.write(_struct_f.pack(self.g_force))
      buff.write(_struct_3f.pack(*self.attitude))
      buff.write(_struct_3f.pack(*self.angular_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 45
      (_x.filter_status, _x.time_stamp_unix, _x.latitude, _x.latitude_std, _x.longitude, _x.longitude_std, _x.height, _x.height_std,) = _struct_B2dfdfdf.unpack(str[start:end])
      start = end
      end += 12
      self.velocity_ned = _struct_3f.unpack(str[start:end])
      start = end
      end += 12
      self.acceleration_body = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (self.g_force,) = _struct_f.unpack(str[start:end])
      start = end
      end += 12
      self.attitude = _struct_3f.unpack(str[start:end])
      start = end
      end += 12
      self.angular_velocity = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2dfdfdf.pack(_x.filter_status, _x.time_stamp_unix, _x.latitude, _x.latitude_std, _x.longitude, _x.longitude_std, _x.height, _x.height_std))
      buff.write(self.velocity_ned.tostring())
      buff.write(self.acceleration_body.tostring())
      buff.write(_struct_f.pack(self.g_force))
      buff.write(self.attitude.tostring())
      buff.write(self.angular_velocity.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 45
      (_x.filter_status, _x.time_stamp_unix, _x.latitude, _x.latitude_std, _x.longitude, _x.longitude_std, _x.height, _x.height_std,) = _struct_B2dfdfdf.unpack(str[start:end])
      start = end
      end += 12
      self.velocity_ned = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.acceleration_body = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 4
      (self.g_force,) = _struct_f.unpack(str[start:end])
      start = end
      end += 12
      self.attitude = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.angular_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3f = struct.Struct("<3f")
_struct_B2dfdfdf = struct.Struct("<B2dfdfdf")
_struct_f = struct.Struct("<f")
